{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    token: localStorage.getItem('token') || '',\n    patients: [],\n    activePatient: null,\n    algorithms: []\n  },\n  getters: {\n    isLoggedIn: state => !!state.token,\n    currentUser: state => state.user,\n    enabledAlgorithms: state => state.algorithms.filter(a => a.status === 1)\n  },\n  mutations: {\n    setToken(state, token) {\n      state.token = token;\n      localStorage.setItem('token', token);\n    },\n    setUser(state, user) {\n      state.user = user;\n      localStorage.setItem('user', JSON.stringify(user));\n    },\n    clearAuth(state) {\n      state.token = '';\n      state.user = null;\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    },\n    setPatients(state, patients) {\n      state.patients = patients;\n    },\n    setActivePatient(state, patient) {\n      state.activePatient = patient;\n    },\n    addPatient(state, patient) {\n      state.patients.push(patient);\n    },\n    updatePatient(state, updatedPatient) {\n      const index = state.patients.findIndex(p => p.id === updatedPatient.id);\n      if (index !== -1) {\n        state.patients.splice(index, 1, updatedPatient);\n      }\n    },\n    deletePatient(state, id) {\n      state.patients = state.patients.filter(p => p.id !== id);\n    },\n    setAlgorithms(state, algorithms) {\n      state.algorithms = algorithms;\n    },\n    addAlgorithm(state, algorithm) {\n      state.algorithms.push(algorithm);\n    },\n    updateAlgorithmStatus(state, {\n      id,\n      status\n    }) {\n      const index = state.algorithms.findIndex(a => a.id === id);\n      if (index !== -1) {\n        state.algorithms[index].status = status;\n      }\n    }\n  },\n  actions: {\n    login({\n      commit\n    }, user) {\n      if (!user) {\n        console.error('登录失败: 用户数据为空');\n        return;\n      }\n      console.log('登录用户数据:', user);\n      commit('setUser', user);\n      commit('setToken', user.id.toString());\n    },\n    logout({\n      commit\n    }) {\n      commit('clearAuth');\n    },\n    fetchAlgorithms({\n      commit\n    }, algorithms) {\n      commit('setAlgorithms', algorithms);\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","state","user","JSON","parse","localStorage","getItem","token","patients","activePatient","algorithms","getters","isLoggedIn","currentUser","enabledAlgorithms","filter","a","status","mutations","setToken","setItem","setUser","stringify","clearAuth","removeItem","setPatients","setActivePatient","patient","addPatient","push","updatePatient","updatedPatient","index","findIndex","p","id","splice","deletePatient","setAlgorithms","addAlgorithm","algorithm","updateAlgorithmStatus","actions","login","commit","console","error","log","toString","logout","fetchAlgorithms","modules"],"sources":["/Users/liuxingliang/Desktop/wendang/20240415/heart-diagnosis-system/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    token: localStorage.getItem('token') || '',\n    patients: [],\n    activePatient: null,\n    algorithms: []\n  },\n  getters: {\n    isLoggedIn: state => !!state.token,\n    currentUser: state => state.user,\n    enabledAlgorithms: state => state.algorithms.filter(a => a.status === 1)\n  },\n  mutations: {\n    setToken(state, token) {\n      state.token = token\n      localStorage.setItem('token', token)\n    },\n    setUser(state, user) {\n      state.user = user\n      localStorage.setItem('user', JSON.stringify(user))\n    },\n    clearAuth(state) {\n      state.token = ''\n      state.user = null\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n    },\n    setPatients(state, patients) {\n      state.patients = patients\n    },\n    setActivePatient(state, patient) {\n      state.activePatient = patient\n    },\n    addPatient(state, patient) {\n      state.patients.push(patient)\n    },\n    updatePatient(state, updatedPatient) {\n      const index = state.patients.findIndex(p => p.id === updatedPatient.id)\n      if (index !== -1) {\n        state.patients.splice(index, 1, updatedPatient)\n      }\n    },\n    deletePatient(state, id) {\n      state.patients = state.patients.filter(p => p.id !== id)\n    },\n    setAlgorithms(state, algorithms) {\n      state.algorithms = algorithms\n    },\n    addAlgorithm(state, algorithm) {\n      state.algorithms.push(algorithm)\n    },\n    updateAlgorithmStatus(state, { id, status }) {\n      const index = state.algorithms.findIndex(a => a.id === id)\n      if (index !== -1) {\n        state.algorithms[index].status = status\n      }\n    }\n  },\n  actions: {\n    login({ commit }, user) {\n      if (!user) {\n        console.error('登录失败: 用户数据为空')\n        return\n      }\n      console.log('登录用户数据:', user)\n      commit('setUser', user)\n      commit('setToken', user.id.toString())\n    },\n    logout({ commit }) {\n      commit('clearAuth')\n    },\n    fetchAlgorithms({ commit }, algorithms) {\n      commit('setAlgorithms', algorithms)\n    }\n  },\n  modules: {\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
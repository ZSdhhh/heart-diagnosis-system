{"ast":null,"code":"import { ref, reactive, onMounted, toRefs, onBeforeUnmount, nextTick, computed } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport { getStatistics } from '@/api/diagnosis';\nimport { getAllPatients } from '@/api/patient';\nimport * as echarts from 'echarts';\nexport default {\n  name: 'Statistics',\n  setup() {\n    const algorithmChartRef = ref(null);\n    const riskChartRef = ref(null);\n    let algorithmChart = null;\n    let riskChart = null;\n\n    // 风险级别颜色配置\n    const riskLevelColors = {\n      high: '#F56C6C',\n      // 高风险-红色\n      medium: '#E6A23C',\n      // 中风险-橙色\n      low: '#67C23A' // 低风险-绿色\n    };\n    const state = reactive({\n      loading: false,\n      statistics: null,\n      patients: [],\n      riskDistribution: {\n        high: 0,\n        medium: 0,\n        low: 0\n      }\n    });\n\n    // 获取算法数量\n    const getAlgorithmCount = () => {\n      if (!state.statistics || !state.statistics.algorithmDistribution) return 0;\n      return state.statistics.algorithmDistribution.length;\n    };\n\n    // 获取高风险百分比\n    const getHighRiskPercentage = () => {\n      if (!state.statistics || !state.statistics.diagnosisList || state.statistics.diagnosisList.length === 0) {\n        return 0;\n      }\n      const diagnosisList = state.statistics.diagnosisList;\n      let highRiskCount = 0;\n      diagnosisList.forEach(item => {\n        if (item && item.result !== undefined && item.result !== null) {\n          const risk = parseFloat(item.result);\n          if (!isNaN(risk) && risk > 0.7) {\n            highRiskCount++;\n          }\n        }\n      });\n      return Math.round(highRiskCount / diagnosisList.length * 100);\n    };\n\n    // 获取统计数据\n    const getStatisticsData = async () => {\n      state.loading = true;\n      try {\n        const res = await getStatistics();\n        state.statistics = res.data;\n\n        // 获取患者数据\n        const patientRes = await getAllPatients();\n        state.patients = patientRes.data;\n\n        // 计算风险分布\n        calculateRiskDistribution();\n\n        // 在DOM更新后渲染图表\n        nextTick(() => {\n          setTimeout(() => {\n            renderCharts();\n          }, 300); // 使用延迟确保DOM已经渲染\n        });\n      } catch (error) {\n        console.error('获取统计数据失败', error);\n        ElMessage.error('获取统计数据失败');\n      } finally {\n        state.loading = false;\n      }\n    };\n\n    // 计算风险分布\n    const calculateRiskDistribution = () => {\n      state.riskDistribution = {\n        high: 0,\n        medium: 0,\n        low: 0\n      };\n      if (state.statistics && state.statistics.diagnosisList) {\n        const diagnosisList = state.statistics.diagnosisList;\n        diagnosisList.forEach(item => {\n          if (item && item.result !== undefined && item.result !== null) {\n            const risk = parseFloat(item.result);\n            if (!isNaN(risk)) {\n              if (risk > 0.7) {\n                state.riskDistribution.high++;\n              } else if (risk > 0.3) {\n                state.riskDistribution.medium++;\n              } else {\n                state.riskDistribution.low++;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    // 渲染图表\n    const renderCharts = () => {\n      if (!state.statistics) return;\n      console.log('正在渲染图表...');\n\n      // 算法分布图表\n      renderAlgorithmChart();\n\n      // 风险等级分布图表\n      renderRiskLevelChart();\n    };\n\n    // 渲染算法分布图表\n    const renderAlgorithmChart = () => {\n      if (!algorithmChartRef.value) {\n        console.error('算法图表DOM引用不存在');\n        return;\n      }\n      try {\n        // 销毁旧图表\n        if (algorithmChart) {\n          algorithmChart.dispose();\n        }\n\n        // 初始化图表\n        algorithmChart = echarts.init(algorithmChartRef.value);\n\n        // 处理数据\n        const algorithmData = state.statistics.algorithmDistribution || [];\n        console.log('算法分布数据(原始):', JSON.stringify(algorithmData));\n        let seriesData = [];\n        if (Array.isArray(algorithmData) && algorithmData.length > 0) {\n          seriesData = algorithmData.map(item => {\n            console.log('算法项目:', JSON.stringify(item));\n            // 确保我们有正确的属性名称\n            const name = item.algorithm !== undefined ? item.algorithm : item.name !== undefined ? item.name : '未知算法';\n            const value = item.count !== undefined ? item.count : item.value !== undefined ? item.value : 0;\n            return {\n              name: name || '未知算法',\n              value: value || 0\n            };\n          });\n        }\n        console.log('处理后的图表数据:', JSON.stringify(seriesData));\n\n        // 如果没有数据，添加默认数据\n        if (seriesData.length === 0) {\n          seriesData = [{\n            name: '暂无数据',\n            value: 0\n          }];\n        }\n\n        // 设置图表配置\n        const option = {\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b}: {c} ({d}%)'\n          },\n          legend: {\n            orient: 'vertical',\n            left: 10,\n            top: 'center',\n            data: seriesData.map(item => item.name)\n          },\n          series: [{\n            name: '算法分布',\n            type: 'pie',\n            radius: ['40%', '70%'],\n            center: ['60%', '50%'],\n            avoidLabelOverlap: false,\n            itemStyle: {\n              borderRadius: 10,\n              borderColor: '#fff',\n              borderWidth: 2\n            },\n            label: {\n              show: false,\n              position: 'center'\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: '18',\n                fontWeight: 'bold'\n              }\n            },\n            labelLine: {\n              show: false\n            },\n            data: seriesData\n          }]\n        };\n\n        // 应用配置\n        algorithmChart.setOption(option);\n        console.log('算法分布图表渲染完成');\n      } catch (error) {\n        console.error('渲染算法分布图表失败:', error);\n      }\n    };\n\n    // 渲染风险等级分布图表\n    const renderRiskLevelChart = () => {\n      if (!riskChartRef.value) {\n        console.error('风险图表DOM引用不存在');\n        return;\n      }\n      try {\n        // 销毁旧图表\n        if (riskChart) {\n          riskChart.dispose();\n        }\n\n        // 初始化图表\n        riskChart = echarts.init(riskChartRef.value);\n\n        // 处理数据\n        // 风险级别分类\n        const riskData = [{\n          name: '高风险',\n          value: state.riskDistribution.high\n        }, {\n          name: '中风险',\n          value: state.riskDistribution.medium\n        }, {\n          name: '低风险',\n          value: state.riskDistribution.low\n        }];\n        console.log('风险分布数据:', JSON.stringify(riskData));\n\n        // 设置图表配置\n        const option = {\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b}: {c} ({d}%)'\n          },\n          legend: {\n            orient: 'vertical',\n            left: 10,\n            top: 'center',\n            data: riskData.map(item => item.name)\n          },\n          series: [{\n            name: '风险等级',\n            type: 'pie',\n            radius: ['40%', '70%'],\n            center: ['60%', '50%'],\n            avoidLabelOverlap: false,\n            itemStyle: {\n              borderRadius: 10,\n              borderColor: '#fff',\n              borderWidth: 2,\n              color: function (params) {\n                return riskLevelColors[params.dataIndex];\n              }\n            },\n            label: {\n              show: false,\n              position: 'center'\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: '18',\n                fontWeight: 'bold'\n              }\n            },\n            labelLine: {\n              show: false\n            },\n            data: riskData\n          }]\n        };\n\n        // 应用配置\n        riskChart.setOption(option);\n        console.log('风险分布图表渲染完成');\n      } catch (error) {\n        console.error('渲染风险分布图表失败:', error);\n      }\n    };\n\n    // 监听窗口大小变化\n    const handleResize = () => {\n      if (algorithmChart) {\n        algorithmChart.resize();\n      }\n      if (riskChart) {\n        riskChart.resize();\n      }\n    };\n    onMounted(() => {\n      console.log('组件已挂载，正在获取统计数据...');\n      getStatisticsData();\n      window.addEventListener('resize', handleResize);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('resize', handleResize);\n      if (algorithmChart) {\n        algorithmChart.dispose();\n        algorithmChart = null;\n      }\n      if (riskChart) {\n        riskChart.dispose();\n        riskChart = null;\n      }\n    });\n    return {\n      algorithmChartRef,\n      riskChartRef,\n      ...toRefs(state),\n      getStatisticsData,\n      getAlgorithmCount,\n      getHighRiskPercentage\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","toRefs","onBeforeUnmount","nextTick","computed","ElMessage","getStatistics","getAllPatients","echarts","name","setup","algorithmChartRef","riskChartRef","algorithmChart","riskChart","riskLevelColors","high","medium","low","state","loading","statistics","patients","riskDistribution","getAlgorithmCount","algorithmDistribution","length","getHighRiskPercentage","diagnosisList","highRiskCount","forEach","item","result","undefined","risk","parseFloat","isNaN","Math","round","getStatisticsData","res","data","patientRes","calculateRiskDistribution","setTimeout","renderCharts","error","console","log","renderAlgorithmChart","renderRiskLevelChart","value","dispose","init","algorithmData","JSON","stringify","seriesData","Array","isArray","map","algorithm","count","option","tooltip","trigger","formatter","legend","orient","left","top","series","type","radius","center","avoidLabelOverlap","itemStyle","borderRadius","borderColor","borderWidth","label","show","position","emphasis","fontSize","fontWeight","labelLine","setOption","riskData","color","params","dataIndex","handleResize","resize","window","addEventListener","removeEventListener"],"sources":["/Users/liuxingliang/Desktop/wendang/20240415/heart-diagnosis-system/frontend/src/views/Statistics.vue"],"sourcesContent":["<template>\n  <div class=\"statistics-container\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>数据统计</span>\n          <el-button type=\"primary\" @click=\"getStatisticsData\">刷新数据</el-button>\n        </div>\n      </template>\n      \n      <el-skeleton :loading=\"loading\" animated>\n        <template #template>\n          <div style=\"padding: 20px\">\n            <el-skeleton-item variant=\"p\" style=\"width: 100%; height: 300px\" />\n            <el-skeleton-item variant=\"p\" style=\"width: 100%; height: 300px; margin-top: 20px\" />\n          </div>\n        </template>\n        \n        <template #default>\n          <div v-if=\"statistics\">\n            <!-- 统计概要卡片 -->\n            <el-row :gutter=\"20\" class=\"summary-cards\">\n              <el-col :span=\"8\">\n                <el-card shadow=\"hover\" class=\"summary-card\">\n                  <template #header>\n                    <div class=\"card-header\">\n                      <span>诊断总数</span>\n                    </div>\n                  </template>\n                  <div class=\"summary-card-value\">{{ statistics.diagnosisCount || 0 }}</div>\n                </el-card>\n              </el-col>\n              \n              <el-col :span=\"8\">\n                <el-card shadow=\"hover\" class=\"summary-card\">\n                  <template #header>\n                    <div class=\"card-header\">\n                      <span>算法数量</span>\n                    </div>\n                  </template>\n                  <div class=\"summary-card-value\">{{ getAlgorithmCount() }}</div>\n                </el-card>\n              </el-col>\n              \n              <el-col :span=\"8\">\n                <el-card shadow=\"hover\" class=\"summary-card\">\n                  <template #header>\n                    <div class=\"card-header\">\n                      <span>高风险比例</span>\n                    </div>\n                  </template>\n                  <div class=\"summary-card-value\">{{ getHighRiskPercentage() }}%</div>\n                </el-card>\n              </el-col>\n            </el-row>\n            \n            <!-- 图表展示 -->\n            <el-row :gutter=\"20\" class=\"charts-row\">\n              <el-col :span=\"12\">\n                <el-card shadow=\"hover\" class=\"chart-card\">\n                  <template #header>\n                    <div class=\"card-header\">\n                      <span>诊断算法分布</span>\n                    </div>\n                  </template>\n                  <div ref=\"algorithmChartRef\" class=\"chart\"></div>\n                </el-card>\n              </el-col>\n              <el-col :span=\"12\">\n                <el-card shadow=\"hover\" class=\"chart-card\">\n                  <template #header>\n                    <div class=\"card-header\">\n                      <span>风险等级分布</span>\n                    </div>\n                  </template>\n                  <div ref=\"riskChartRef\" class=\"chart\"></div>\n                </el-card>\n              </el-col>\n            </el-row>\n          </div>\n          <div v-else class=\"no-data\">暂无统计数据</div>\n        </template>\n      </el-skeleton>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted, toRefs, onBeforeUnmount, nextTick, computed } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport { getStatistics } from '@/api/diagnosis'\nimport { getAllPatients } from '@/api/patient'\nimport * as echarts from 'echarts'\n\nexport default {\n  name: 'Statistics',\n  setup() {\n    const algorithmChartRef = ref(null)\n    const riskChartRef = ref(null)\n    let algorithmChart = null\n    let riskChart = null\n    \n    // 风险级别颜色配置\n    const riskLevelColors = {\n      high: '#F56C6C',  // 高风险-红色\n      medium: '#E6A23C', // 中风险-橙色\n      low: '#67C23A'     // 低风险-绿色\n    }\n    \n    const state = reactive({\n      loading: false,\n      statistics: null,\n      patients: [],\n      riskDistribution: {\n        high: 0,\n        medium: 0,\n        low: 0\n      }\n    })\n    \n    // 获取算法数量\n    const getAlgorithmCount = () => {\n      if (!state.statistics || !state.statistics.algorithmDistribution) return 0\n      return state.statistics.algorithmDistribution.length\n    }\n    \n    // 获取高风险百分比\n    const getHighRiskPercentage = () => {\n      if (!state.statistics || !state.statistics.diagnosisList || state.statistics.diagnosisList.length === 0) {\n        return 0\n      }\n      \n      const diagnosisList = state.statistics.diagnosisList\n      let highRiskCount = 0\n      \n      diagnosisList.forEach(item => {\n        if (item && item.result !== undefined && item.result !== null) {\n          const risk = parseFloat(item.result)\n          if (!isNaN(risk) && risk > 0.7) {\n            highRiskCount++\n          }\n        }\n      })\n      \n      return Math.round((highRiskCount / diagnosisList.length) * 100)\n    }\n    \n    // 获取统计数据\n    const getStatisticsData = async () => {\n      state.loading = true\n      try {\n        const res = await getStatistics()\n        state.statistics = res.data\n        \n        // 获取患者数据\n        const patientRes = await getAllPatients()\n        state.patients = patientRes.data\n        \n        // 计算风险分布\n        calculateRiskDistribution()\n        \n        // 在DOM更新后渲染图表\n        nextTick(() => {\n          setTimeout(() => {\n            renderCharts()\n          }, 300) // 使用延迟确保DOM已经渲染\n        })\n      } catch (error) {\n        console.error('获取统计数据失败', error)\n        ElMessage.error('获取统计数据失败')\n      } finally {\n        state.loading = false\n      }\n    }\n    \n    // 计算风险分布\n    const calculateRiskDistribution = () => {\n      state.riskDistribution = {\n        high: 0,\n        medium: 0,\n        low: 0\n      }\n      \n      if (state.statistics && state.statistics.diagnosisList) {\n        const diagnosisList = state.statistics.diagnosisList\n        \n        diagnosisList.forEach(item => {\n          if (item && item.result !== undefined && item.result !== null) {\n            const risk = parseFloat(item.result)\n            if (!isNaN(risk)) {\n              if (risk > 0.7) {\n                state.riskDistribution.high++\n              } else if (risk > 0.3) {\n                state.riskDistribution.medium++\n              } else {\n                state.riskDistribution.low++\n              }\n            }\n          }\n        })\n      }\n    }\n    \n    // 渲染图表\n    const renderCharts = () => {\n      if (!state.statistics) return\n      \n      console.log('正在渲染图表...')\n      \n      // 算法分布图表\n      renderAlgorithmChart()\n      \n      // 风险等级分布图表\n      renderRiskLevelChart()\n    }\n    \n    // 渲染算法分布图表\n    const renderAlgorithmChart = () => {\n      if (!algorithmChartRef.value) {\n        console.error('算法图表DOM引用不存在')\n        return\n      }\n      \n      try {\n        // 销毁旧图表\n        if (algorithmChart) {\n          algorithmChart.dispose()\n        }\n        \n        // 初始化图表\n        algorithmChart = echarts.init(algorithmChartRef.value)\n        \n        // 处理数据\n        const algorithmData = state.statistics.algorithmDistribution || []\n        console.log('算法分布数据(原始):', JSON.stringify(algorithmData))\n        \n        let seriesData = []\n        if (Array.isArray(algorithmData) && algorithmData.length > 0) {\n          seriesData = algorithmData.map(item => {\n            console.log('算法项目:', JSON.stringify(item))\n            // 确保我们有正确的属性名称\n            const name = item.algorithm !== undefined ? item.algorithm : \n                          (item.name !== undefined ? item.name : '未知算法')\n            const value = item.count !== undefined ? item.count : \n                          (item.value !== undefined ? item.value : 0)\n            \n            return {\n              name: name || '未知算法',\n              value: value || 0\n            }\n          })\n        }\n        \n        console.log('处理后的图表数据:', JSON.stringify(seriesData))\n        \n        // 如果没有数据，添加默认数据\n        if (seriesData.length === 0) {\n          seriesData = [{ name: '暂无数据', value: 0 }]\n        }\n        \n        // 设置图表配置\n        const option = {\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b}: {c} ({d}%)'\n          },\n          legend: {\n            orient: 'vertical',\n            left: 10,\n            top: 'center',\n            data: seriesData.map(item => item.name)\n          },\n          series: [\n            {\n              name: '算法分布',\n              type: 'pie',\n              radius: ['40%', '70%'],\n              center: ['60%', '50%'],\n              avoidLabelOverlap: false,\n              itemStyle: {\n                borderRadius: 10,\n                borderColor: '#fff',\n                borderWidth: 2\n              },\n              label: {\n                show: false,\n                position: 'center'\n              },\n              emphasis: {\n                label: {\n                  show: true,\n                  fontSize: '18',\n                  fontWeight: 'bold'\n                }\n              },\n              labelLine: {\n                show: false\n              },\n              data: seriesData\n            }\n          ]\n        }\n        \n        // 应用配置\n        algorithmChart.setOption(option)\n        console.log('算法分布图表渲染完成')\n      } catch (error) {\n        console.error('渲染算法分布图表失败:', error)\n      }\n    }\n    \n    // 渲染风险等级分布图表\n    const renderRiskLevelChart = () => {\n      if (!riskChartRef.value) {\n        console.error('风险图表DOM引用不存在')\n        return\n      }\n      \n      try {\n        // 销毁旧图表\n        if (riskChart) {\n          riskChart.dispose()\n        }\n        \n        // 初始化图表\n        riskChart = echarts.init(riskChartRef.value)\n        \n        // 处理数据\n        // 风险级别分类\n        const riskData = [\n          { name: '高风险', value: state.riskDistribution.high },\n          { name: '中风险', value: state.riskDistribution.medium },\n          { name: '低风险', value: state.riskDistribution.low }\n        ]\n        \n        console.log('风险分布数据:', JSON.stringify(riskData))\n        \n        // 设置图表配置\n        const option = {\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b}: {c} ({d}%)'\n          },\n          legend: {\n            orient: 'vertical',\n            left: 10,\n            top: 'center',\n            data: riskData.map(item => item.name)\n          },\n          series: [\n            {\n              name: '风险等级',\n              type: 'pie',\n              radius: ['40%', '70%'],\n              center: ['60%', '50%'],\n              avoidLabelOverlap: false,\n              itemStyle: {\n                borderRadius: 10,\n                borderColor: '#fff',\n                borderWidth: 2,\n                color: function(params) {\n                  return riskLevelColors[params.dataIndex]\n                }\n              },\n              label: {\n                show: false,\n                position: 'center'\n              },\n              emphasis: {\n                label: {\n                  show: true,\n                  fontSize: '18',\n                  fontWeight: 'bold'\n                }\n              },\n              labelLine: {\n                show: false\n              },\n              data: riskData\n            }\n          ]\n        }\n        \n        // 应用配置\n        riskChart.setOption(option)\n        console.log('风险分布图表渲染完成')\n      } catch (error) {\n        console.error('渲染风险分布图表失败:', error)\n      }\n    }\n    \n    // 监听窗口大小变化\n    const handleResize = () => {\n      if (algorithmChart) {\n        algorithmChart.resize()\n      }\n      if (riskChart) {\n        riskChart.resize()\n      }\n    }\n    \n    onMounted(() => {\n      console.log('组件已挂载，正在获取统计数据...')\n      getStatisticsData()\n      window.addEventListener('resize', handleResize)\n    })\n    \n    onBeforeUnmount(() => {\n      window.removeEventListener('resize', handleResize)\n      if (algorithmChart) {\n        algorithmChart.dispose()\n        algorithmChart = null\n      }\n      if (riskChart) {\n        riskChart.dispose()\n        riskChart = null\n      }\n    })\n    \n    return {\n      algorithmChartRef,\n      riskChartRef,\n      ...toRefs(state),\n      getStatisticsData,\n      getAlgorithmCount,\n      getHighRiskPercentage\n    }\n  }\n}\n</script>\n\n<style scoped>\n.statistics-container {\n  min-height: 100%;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.summary-cards {\n  margin-bottom: 20px;\n}\n\n.summary-card {\n  text-align: center;\n  transition: all 0.3s;\n}\n\n.summary-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n}\n\n.summary-card-value {\n  font-size: 28px;\n  font-weight: bold;\n  color: #409EFF;\n  padding: 15px 0;\n}\n\n.charts-row {\n  margin-bottom: 20px;\n}\n\n.chart-card {\n  margin-bottom: 20px;\n  transition: all 0.3s;\n}\n\n.chart-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n}\n\n.chart {\n  height: 350px;\n  width: 100%;\n}\n\n.no-data {\n  text-align: center;\n  color: #909399;\n  padding: 50px 0;\n  font-size: 16px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
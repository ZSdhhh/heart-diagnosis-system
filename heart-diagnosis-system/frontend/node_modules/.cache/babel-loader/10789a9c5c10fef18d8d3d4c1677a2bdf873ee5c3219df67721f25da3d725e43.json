{"ast":null,"code":"import { ref, reactive, computed, toRefs, watch, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { getAllPatients } from '@/api/patient';\nimport { diagnose, getDiagnosisByPatientId } from '@/api/diagnosis';\nimport { getEnabledAlgorithms } from '@/api/algorithm';\nexport default {\n  name: 'Diagnosis',\n  setup() {\n    const store = useStore();\n\n    // 风险级别阈值配置\n    const riskThresholds = {\n      high: 0.7,\n      // 高风险阈值 \n      medium: 0.3 // 中风险阈值\n    };\n\n    // 风险级别颜色配置\n    const riskLevelColors = {\n      high: '#F56C6C',\n      // 高风险-红色\n      medium: '#E6A23C',\n      // 中风险-橙色\n      low: '#67C23A' // 低风险-绿色\n    };\n    const state = reactive({\n      form: {\n        patientId: '',\n        algorithm: ''\n      },\n      patients: [],\n      algorithms: [],\n      diagnosisResult: null,\n      loading: false,\n      historyList: [],\n      currentPage: 1,\n      pageSize: 10,\n      total: 0\n    });\n\n    // 获取患者列表\n    const getPatients = async () => {\n      try {\n        const res = await getAllPatients();\n        state.patients = res.data;\n      } catch (error) {\n        ElMessage.error('获取患者列表失败');\n      }\n    };\n\n    // 获取算法列表\n    const getAlgorithms = async () => {\n      try {\n        const res = await getEnabledAlgorithms();\n        state.algorithms = res.data;\n        store.dispatch('fetchAlgorithms', res.data);\n      } catch (error) {\n        ElMessage.error('获取算法列表失败');\n      }\n    };\n\n    // 获取历史诊断记录\n    const getDiagnosisHistory = async patientId => {\n      if (!patientId) return;\n      try {\n        const res = await getDiagnosisByPatientId(patientId);\n        state.historyList = res.data;\n        state.total = res.data.length;\n      } catch (error) {\n        ElMessage.error('获取诊断历史失败');\n      }\n    };\n\n    // 开始诊断\n    const handleDiagnosis = async () => {\n      if (!state.form.patientId) {\n        ElMessage.warning('请选择患者');\n        return;\n      }\n      state.loading = true;\n      try {\n        // 确保算法名称使用UTF-8编码\n        const data = {\n          patientId: state.form.patientId,\n          algorithm: state.form.algorithm\n        };\n        const res = await diagnose(data);\n        state.diagnosisResult = res.data;\n\n        // 刷新诊断历史\n        getDiagnosisHistory(state.form.patientId);\n      } catch (error) {\n        ElMessage.error('诊断失败');\n      } finally {\n        state.loading = false;\n      }\n    };\n\n    // 获取风险颜色\n    const getResultColor = result => {\n      if (result > riskThresholds.high) return riskLevelColors.high;\n      if (result > riskThresholds.medium) return riskLevelColors.medium;\n      return riskLevelColors.low;\n    };\n\n    // 获取风险等级\n    const getRiskLevel = result => {\n      if (result > riskThresholds.high) return '高风险';\n      if (result > riskThresholds.medium) return '中风险';\n      return '低风险';\n    };\n\n    // 获取风险描述\n    const getRiskDescription = result => {\n      if (result > riskThresholds.high) {\n        return '患者心脏病风险较高，建议尽快就医检查。';\n      } else if (result > riskThresholds.medium) {\n        return '患者心脏病风险中等，建议定期检查心脏状况。';\n      } else {\n        return '患者心脏病风险较低，建议保持健康的生活方式。';\n      }\n    };\n\n    // 解码算法名称\n    const decodeAlgorithmName = algorithmName => {\n      if (!algorithmName) return '未知算法';\n      return algorithmName;\n    };\n\n    // 监听患者变化，获取诊断历史\n    watch(() => state.form.patientId, newVal => {\n      if (newVal) {\n        getDiagnosisHistory(newVal);\n      } else {\n        state.historyList = [];\n      }\n    });\n\n    // 处理分页\n    const handleSizeChange = newSize => {\n      state.pageSize = newSize;\n      getDiagnosisHistory(state.form.patientId);\n    };\n    const handleCurrentChange = newPage => {\n      state.currentPage = newPage;\n      getDiagnosisHistory(state.form.patientId);\n    };\n\n    // 初始化\n    onMounted(() => {\n      getPatients();\n      getAlgorithms();\n    });\n    return {\n      ...toRefs(state),\n      handleDiagnosis,\n      getResultColor,\n      getRiskLevel,\n      getRiskDescription,\n      riskThresholds,\n      decodeAlgorithmName\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","toRefs","watch","onMounted","useStore","ElMessage","getAllPatients","diagnose","getDiagnosisByPatientId","getEnabledAlgorithms","name","setup","store","riskThresholds","high","medium","riskLevelColors","low","state","form","patientId","algorithm","patients","algorithms","diagnosisResult","loading","historyList","currentPage","pageSize","total","getPatients","res","data","error","getAlgorithms","dispatch","getDiagnosisHistory","length","handleDiagnosis","warning","getResultColor","result","getRiskLevel","getRiskDescription","decodeAlgorithmName","algorithmName","newVal","handleSizeChange","newSize","handleCurrentChange","newPage"],"sources":["/Users/liuxingliang/Desktop/wendang/20240415/heart-diagnosis-system/frontend/src/views/Diagnosis.vue"],"sourcesContent":["<template>\n  <div class=\"diagnosis-container\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>心脏病诊断</span>\n        </div>\n      </template>\n      \n      <el-form :model=\"form\" label-width=\"120px\">\n        <el-form-item label=\"选择患者\">\n          <el-select v-model=\"form.patientId\" placeholder=\"请选择患者\" style=\"width: 100%\">\n            <el-option \n              v-for=\"patient in patients\" \n              :key=\"patient.id\" \n              :label=\"patient.name\" \n              :value=\"patient.id\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"选择算法\">\n          <el-select v-model=\"form.algorithm\" placeholder=\"请选择诊断算法\" style=\"width: 100%;\">\n            <el-option \n              v-for=\"algo in algorithms\" \n              :key=\"algo.id\" \n              :label=\"algo.name\" \n              :value=\"algo.name\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleDiagnosis\" :loading=\"loading\">开始诊断</el-button>\n        </el-form-item>\n      </el-form>\n      \n      <div v-if=\"diagnosisResult !== null\" class=\"result-container\">\n        <h3>诊断结果</h3>\n        <el-progress \n          type=\"circle\" \n          :percentage=\"Math.round(diagnosisResult * 100)\" \n          :color=\"getResultColor(diagnosisResult)\"\n          :status=\"diagnosisResult > riskThresholds.high ? 'exception' : (diagnosisResult > riskThresholds.medium ? 'warning' : 'success')\">\n        </el-progress>\n        <div class=\"risk-text\">\n          心脏病风险: <span :style=\"{color: getResultColor(diagnosisResult)}\">{{ getRiskLevel(diagnosisResult) }}</span>\n        </div>\n        <div class=\"risk-description\">\n          {{ getRiskDescription(diagnosisResult) }}\n        </div>\n      </div>\n      \n      <div v-if=\"form.patientId && historyList.length > 0\" class=\"history-container\">\n        <h3>历史诊断记录</h3>\n        <el-table :data=\"historyList\" style=\"width: 100%\">\n          <el-table-column prop=\"createTime\" label=\"诊断时间\" width=\"180\">\n            <template #default=\"scope\">\n              {{ scope.row.createTime ? new Date(scope.row.createTime).toLocaleString() : '未知时间' }}\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"algorithm\" label=\"算法\">\n            <template #default=\"scope\">\n              {{ decodeAlgorithmName(scope.row.algorithm) }}\n            </template>\n          </el-table-column>\n          <el-table-column label=\"风险值\">\n            <template #default=\"scope\">\n              {{ (scope.row.result * 100).toFixed(2) }}%\n            </template>\n          </el-table-column>\n          <el-table-column label=\"风险等级\">\n            <template #default=\"scope\">\n              <span :style=\"{color: getResultColor(scope.row.result)}\">\n                {{ getRiskLevel(scope.row.result) }}\n              </span>\n            </template>\n          </el-table-column>\n        </el-table>\n        <div class=\"pagination-container\">\n          <el-pagination\n            v-model:current-page=\"currentPage\"\n            v-model:page-size=\"pageSize\"\n            :page-sizes=\"[5, 10, 20, 50]\"\n            :small=\"false\"\n            :disabled=\"false\"\n            :background=\"true\"\n            layout=\"total, sizes, prev, pager, next, jumper\"\n            :total=\"total\"\n            @size-change=\"handleSizeChange\"\n            @current-change=\"handleCurrentChange\"\n          />\n        </div>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, toRefs, watch, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { ElMessage } from 'element-plus'\nimport { getAllPatients } from '@/api/patient'\nimport { diagnose, getDiagnosisByPatientId } from '@/api/diagnosis'\nimport { getEnabledAlgorithms } from '@/api/algorithm'\n\nexport default {\n  name: 'Diagnosis',\n  setup() {\n    const store = useStore()\n    \n    // 风险级别阈值配置\n    const riskThresholds = {\n      high: 0.7,  // 高风险阈值 \n      medium: 0.3 // 中风险阈值\n    }\n    \n    // 风险级别颜色配置\n    const riskLevelColors = {\n      high: '#F56C6C',  // 高风险-红色\n      medium: '#E6A23C', // 中风险-橙色\n      low: '#67C23A'     // 低风险-绿色\n    }\n    \n    const state = reactive({\n      form: {\n        patientId: '',\n        algorithm: ''\n      },\n      patients: [],\n      algorithms: [],\n      diagnosisResult: null,\n      loading: false,\n      historyList: [],\n      currentPage: 1,\n      pageSize: 10,\n      total: 0\n    })\n    \n    // 获取患者列表\n    const getPatients = async () => {\n      try {\n        const res = await getAllPatients()\n        state.patients = res.data\n      } catch (error) {\n        ElMessage.error('获取患者列表失败')\n      }\n    }\n    \n    // 获取算法列表\n    const getAlgorithms = async () => {\n      try {\n        const res = await getEnabledAlgorithms()\n        state.algorithms = res.data\n        store.dispatch('fetchAlgorithms', res.data)\n      } catch (error) {\n        ElMessage.error('获取算法列表失败')\n      }\n    }\n    \n    // 获取历史诊断记录\n    const getDiagnosisHistory = async (patientId) => {\n      if (!patientId) return\n      \n      try {\n        const res = await getDiagnosisByPatientId(patientId)\n        state.historyList = res.data\n        state.total = res.data.length\n      } catch (error) {\n        ElMessage.error('获取诊断历史失败')\n      }\n    }\n    \n    // 开始诊断\n    const handleDiagnosis = async () => {\n      if (!state.form.patientId) {\n        ElMessage.warning('请选择患者')\n        return\n      }\n      \n      state.loading = true\n      try {\n        // 确保算法名称使用UTF-8编码\n        const data = {\n          patientId: state.form.patientId,\n          algorithm: state.form.algorithm\n        }\n        \n        const res = await diagnose(data)\n        state.diagnosisResult = res.data\n        \n        // 刷新诊断历史\n        getDiagnosisHistory(state.form.patientId)\n      } catch (error) {\n        ElMessage.error('诊断失败')\n      } finally {\n        state.loading = false\n      }\n    }\n    \n    // 获取风险颜色\n    const getResultColor = (result) => {\n      if (result > riskThresholds.high) return riskLevelColors.high\n      if (result > riskThresholds.medium) return riskLevelColors.medium\n      return riskLevelColors.low\n    }\n    \n    // 获取风险等级\n    const getRiskLevel = (result) => {\n      if (result > riskThresholds.high) return '高风险'\n      if (result > riskThresholds.medium) return '中风险'\n      return '低风险'\n    }\n    \n    // 获取风险描述\n    const getRiskDescription = (result) => {\n      if (result > riskThresholds.high) {\n        return '患者心脏病风险较高，建议尽快就医检查。'\n      } else if (result > riskThresholds.medium) {\n        return '患者心脏病风险中等，建议定期检查心脏状况。'\n      } else {\n        return '患者心脏病风险较低，建议保持健康的生活方式。'\n      }\n    }\n    \n    // 解码算法名称\n    const decodeAlgorithmName = (algorithmName) => {\n      if (!algorithmName) return '未知算法';\n      return algorithmName;\n    }\n    \n    // 监听患者变化，获取诊断历史\n    watch(() => state.form.patientId, (newVal) => {\n      if (newVal) {\n        getDiagnosisHistory(newVal)\n      } else {\n        state.historyList = []\n      }\n    })\n    \n    // 处理分页\n    const handleSizeChange = (newSize) => {\n      state.pageSize = newSize\n      getDiagnosisHistory(state.form.patientId)\n    }\n    \n    const handleCurrentChange = (newPage) => {\n      state.currentPage = newPage\n      getDiagnosisHistory(state.form.patientId)\n    }\n    \n    // 初始化\n    onMounted(() => {\n      getPatients()\n      getAlgorithms()\n    })\n    \n    return {\n      ...toRefs(state),\n      handleDiagnosis,\n      getResultColor,\n      getRiskLevel,\n      getRiskDescription,\n      riskThresholds,\n      decodeAlgorithmName\n    }\n  }\n}\n</script>\n\n<style scoped>\n.diagnosis-container {\n  min-height: 100%;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.result-container {\n  margin-top: 20px;\n  text-align: center;\n  padding: 20px;\n  border-top: 1px solid #EBEEF5;\n}\n\n.risk-text {\n  margin-top: 15px;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.risk-description {\n  margin-top: 10px;\n  color: #606266;\n}\n\n.history-container {\n  margin-top: 30px;\n  border-top: 1px solid #EBEEF5;\n  padding-top: 20px;\n}\n\n.pagination-container {\n  margin-top: 20px;\n  text-align: right;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}